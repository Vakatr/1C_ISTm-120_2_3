&НаКлиенте
Процедура ЗаписатьМаршрутВТЧ()
	Попытка
		опМаршрут = Элементы.Карта.Документ.getElementById("directions_panel");
		Если опМаршрут.innerHTML <> "" Тогда
			ОтключитьОбработчикОжидания("ЗаписатьМаршрутВТЧ");
			Выполнить(опМаршрут.innerHTML);
		КонецЕсли;
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаСервере
Функция СоздатьHTML()
	Обработка=РеквизитФормыВЗначение("Объект");
	Макет=Обработка.ПолучитьМакет("Макет");
	СтрокаHTML=Макет.ПолучитьТекст();
	Возврат СтрокаHTML;
КонецФункции	//СоздатьHTML

&НаКлиенте
Процедура Сформировать(Команда)
	Объект.СписокАдресов.Очистить();
	ГородТекущий = ПолучитьГород();
	СтатусПланирования = ПолучитьПеречислениеТребуетсяДоставка();
	Для Каждого Заказ Из Объект.Заказы Цикл
		Если Заказ.Сформировать=Истина И Заказ.Статус = СтатусПланирования Тогда
			НовСтрока =  Объект.СписокАдресов.Добавить();
			НовСтрока.Адрес = ГородТекущий+" "+Заказ.АдресДоставки;
		КонецЕсли; 
	КонецЦикла; 
	КартаТекст = "";
	//Проверяем количество адресов в маршруте
	Если Объект.СписокАдресов.Количество() < 2 Тогда
		Сообщить("Для прокладки маршрута нужно иметь минимум 2 точки");
		Возврат;
	КонецЕсли;
	Для Каждого Заказ Из Объект.Заказы Цикл
		Если Заказ.Сформировать=Истина Тогда
			Заказ.Статус = ПолучитьПеречислениеДоставкаЗапланирована();
			Заказ.Сформировать = Ложь;
			Заказ.Обновить=Истина;
		КонецЕсли; 
	КонецЦикла;
	опАдреса = "";
	//Задаем начальный и конечный адреса
	опНач = Объект.СписокАдресов.Получить(0).Адрес;
	опКон = Объект.СписокАдресов.Получить(Объект.СписокАдресов.Количество()-1).Адрес;
	Для Каждого Стр Из Объект.СписокАдресов Цикл
		//Если адрес начальный или конечный - пропускаем
		Если Стр.НомерСтроки = 1 или Стр.НомерСтроки = Объект.СписокАдресов.Количество() Тогда
			Продолжить;
		КонецЕсли;
		опАдреса = опАдреса + " waypts.push({location:'" + Стр.Адрес + "',stopover:true});";
	КонецЦикла;
	//Подставляем параметры в макет "Карта"
	опМаршрут = СоздатьHTML();
	опМаршрут = СтрЗаменить(опМаршрут,"[=-APIKEY-=]",ПолучитьСерверныйВызов());
	опМаршрут = СтрЗаменить(опМаршрут,"[=-опАдреса-=]",опАдреса);
	опМаршрут = СтрЗаменить(опМаршрут,"[=-опНач-=]",опНач);
	опМаршрут = СтрЗаменить(опМаршрут,"[=-опКон-=]",опКон);
	//КартаТекст = опМаршрут;	
КонецПроцедуры

Функция ПолучитьСерверныйВызов()
	Возврат Константы.APIKeyGoogle.Получить();
КонецФункции

Функция ПолучитьПеречислениеДоставкаЗапланирована()
	Возврат Перечисления.СтатусыЗаказов.ДоставкаЗапланирована;
КонецФункции

Функция ПолучитьПеречислениеТребуетсяДоставка()
	Возврат Перечисления.СтатусыЗаказов.ТребуетсяДоставка;
КонецФункции


Функция ПолучитьГород()
	Возврат Константы.Город.Получить();
КонецФункции


&НаКлиенте
Процедура КартаДокументСформирован(Элемент)
	// Вставить содержимое обработчика.
	Состояние("");
КонецПроцедуры

&НаСервере
Процедура опЗаполнитьМаршрут(Точка,КонТочка,НачАдрес,КонАдрес,опРасстояние)
	Если Объект.НаВыходе.Количество() = 0 Тогда
		Стр = Объект.НаВыходе.Добавить();
		Стр.Точка = "A";
		Стр.Адрес = НачАдрес;
	КонецЕсли;
	
	Стр = Объект.НаВыходе.Добавить();
	Стр.Точка = Точка;
	Стр.Адрес = КонАдрес;
	Стр.Растояние = опРасстояние;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЗаказы(Команда)
	ОбновитьЗаказыНаФорме();
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаказыНаФорме()
	ЗаказыДанные = API.ПолучитьЗаказы();
	Объект.Заказы.Очистить();
	Объект.СоставЗаказа.Очистить();
	Для Каждого Элемента Из ЗаказыДанные Цикл
		НовСтрока = Объект.Заказы.Добавить();
		НовСтрока.ДатаЗаказа = Дата(СтрЗаменить(СтрЗаменить(СтрЗаменить(Элемента.date_of_created,"-",""),":","")," ",""));
		НовСтрока.НомерЗаказа = Элемента.number_order;
		СоставЗаказа = API.ПолучитьСоставЗаказа(НовСтрока.НомерЗаказа); 
		Для Каждого Стр Из СоставЗаказа Цикл
		СтрокаСостава = Объект.СоставЗаказа.Добавить();
		СтрокаСостава.НомерЗаказа  = НовСтрока.НомерЗаказа;
		СтрокаСостава.Номенклатура = Стр.sku;
		СтрокаСостава.Количество   = Стр.quantity;
		СтрокаСостава.Вес          = Стр.weight;
		КонецЦикла; 
		НовСтрока.Клиент = Элемента.customer;
		НовСтрока.АдресДоставки = Элемента.address;
		
		НовСтрока.Статус = ?(Элемента.status=2,Перечисления.СтатусыЗаказов.ДоставкаЗапланирована,Перечисления.СтатусыЗаказов.ТребуетсяДоставка);		
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаказы(Команда)
	ОтправитьЗаказыСФормы();
КонецПроцедуры

&НаСервере
Процедура ОтправитьЗаказыСФормы()
	API.ОтправитьДанныеЗаказов(Объект.Заказы.Выгрузить()); 
КонецПроцедуры


&НаКлиенте
Процедура Настройки(Команда)
	Фрм=ПолучитьФорму("ОбщаяФорма.ФормаКонстант",);
	Фрм.Открыть();
КонецПроцедуры

//&НаКлиенте
//Процедура Тест(Команда)
//	Запрос();
//КонецПроцедуры

//&НаСервере
//Процедура Запрос()
//	Ответ=ВыполнитьHTTPЗапрос("https://maps.googleapis.com/maps/api/geocode/json?address="+Тест+"&language=ru&key="+Константы.APIKeyGoogle.Получить()+"");
//	Результат = JSON_ПреобразоватьВСтруктуру(Ответ.ПолучитьТелоКакСтроку()).results[0].geometry.location;
//	Сообщить(Результат.lat); //широта
//	Сообщить(Результат.lng); //долгота
//КонецПроцедуры

&НаСервере
Функция JSON_ПреобразоватьВСтруктуру(_Строка, _Представление="") Экспорт   
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	
	Если ТипЗнч(_Строка) = Тип("Строка") Тогда
		Запись = Новый ЗаписьТекста(ИмяВременногоФайла); 
		Запись.Записать(_Строка);
		Запись.Закрыть();
	Иначе    
		_Строка.Записать(ИмяВременногоФайла);
	КонецЕсли;
	
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.ОткрытьФайл(ИмяВременногоФайла);
	
	СериалОБъектJSON = Неопределено; 
	ТекущийСериалОбъектJSON = Неопределено; 
	
	СимволКавычки=""""; ИмяСвойства="";
	спОткрытыеОбъекты = Новый СписокЗначений;
	Попытка
		Пока ЧтениеJSON.Прочитать() Цикл
			Если ЧтениеJSON.ТипТекущегоЗначения  = ТипЗначенияJSON.НачалоОбъекта или ЧтениеJSON.ТипТекущегоЗначения  = ТипЗначенияJSON.НачалоМассива Тогда
				ТипОбъекта = ?(ЧтениеJSON.ТипТекущегоЗначения  = ТипЗначенияJSON.НачалоОбъекта, "Структура", "Массив");
				
				Если СериалОБъектJSON = Неопределено Тогда
					СериалОБъектJSON = Вычислить("Новый "+ТипОбъекта); 
					ТекущийСериалОбъектJSON = СериалОБъектJSON;
				Иначе
					
					Если ТипЗнч(ТекущийСериалОбъектJSON) = Тип("Массив") Тогда
						Выполнить("ТекущийСериалОбъектJSON.Добавить(Новый "+ТипОбъекта+")"); //добавляем новую структуру / массив
						ТекущийСериалОбъектJSON = Вычислить("ТекущийСериалОбъектJSON.Получить(ТекущийСериалОбъектJSON.Количество()-1)");
					Иначе    
						Выполнить("ТекущийСериалОбъектJSON.Вставить("+СимволКавычки+ИмяСвойства+СимволКавычки+", Новый "+ТипОбъекта+")"); //добавляем новую структуру / массив
						ТекущийСериалОбъектJSON = Вычислить("ТекущийСериалОбъектJSON."+ИмяСвойства);
					КонецЕсли;
				КонецЕсли;
				
				спОткрытыеОбъекты.Добавить(Новый Структура("ТекущийСериалОбъектJSON", ТекущийСериалОбъектJSON));
				
			ИначеЕсли ЧтениеJSON.ТипТекущегоЗначения  = ТипЗначенияJSON.КонецОбъекта или ЧтениеJSON.ТипТекущегоЗначения  = ТипЗначенияJSON.КонецМассива Тогда
				
				спОткрытыеОбъекты.Удалить(спОткрытыеОбъекты.Получить(спОткрытыеОбъекты.Количество()-1));
				
				Попытка
					ТекущийСериалОбъектJSON = спОткрытыеОбъекты.Получить(спОткрытыеОбъекты.Количество()-1).Значение.ТекущийСериалОбъектJSON;
				Исключение
					//дошли до конца
				КонецПопытки;
				
			ИначеЕсли ЧтениеJSON.ТипТекущегоЗначения  = ТипЗначенияJSON.ИмяСвойства Тогда
				ИмяСвойства  = ЧтениеJSON.ТекущееЗначение;
				
				
			ИначеЕсли ЧтениеJSON.ТипТекущегоЗначения  = ТипЗначенияJSON.Null или ЧтениеJSON.ТипТекущегоЗначения  = ТипЗначенияJSON.Булево
				ИЛИ ЧтениеJSON.ТипТекущегоЗначения  = ТипЗначенияJSON.Строка или ЧтениеJSON.ТипТекущегоЗначения  = ТипЗначенияJSON.Число Тогда
				
				ТекущееЗначение = ЧтениеJSON.ТекущееЗначение;
				
				Если Найти(нрег(ИмяСвойства), "date")>0 Тогда
					Если ЧтениеJSON.ТекущееЗначение="" Тогда
						ТекущееЗначение = Дата(1,1,1);    
					Иначе    
						Попытка
							ТекущееЗначение = Дата(Лев(ТекущееЗначение,4), Сред(ТекущееЗначение,6,2), Сред(ТекущееЗначение,9,2), Сред(ТекущееЗначение,12,2),Сред(ТекущееЗначение,15,2),0);
						Исключение
							//прописать преобразования в дату в ненайденном формате
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
				
				Если ТипЗнч(ТекущийСериалОбъектJSON) = Тип("Массив") Тогда
					ТекущийСериалОбъектJSON.добавить(ТекущееЗначение);
				ИначеЕсли ИмяСвойства<>"" Тогда
					ТекущийСериалОбъектJSON.Вставить(ИмяСвойства, ТекущееЗначение);
				КонецЕсли;
				
			Иначе
				ИмяТекущегоЗначения = "";
			КонецЕсли;
		КонецЦикла;
		
	Исключение
		Сообщить(""+ОписаниеОшибки()+Символы.пс+"Строка json не преобразована: "+_Представление);
		Возврат Новый Массив();
		
	КонецПопытки;
	
	Возврат СериалОБъектJSON
КонецФункции

&НаСервере
Функция ВыполнитьHTTPЗапрос(ПолныйАдресРесурса) Экспорт
	СтруктураURI = СтруктураURI(ПолныйАдресРесурса); 
	HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт,,,,,Новый ЗащищенноеСоединениеOpenSSL());
	
	HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере); 
	Попытка
		Результат =  HTTPСоединение.Получить(HTTPЗапрос);
	Исключение
		// исключение здесь говорит о том, что запрос не дошел до HTTP-Сервера
		Сообщить("Произошла сетевая ошибка!");
		ВызватьИсключение;
	КонецПопытки;
	
	Если Результат.КодСостояния >= 400 и Результат.КодСостояния < 500  Тогда
		Сообщить("Код статуса больше 4XX, ошибка запроса.  Код статуса: " + Результат.КодСостояния);
	КонецЕсли;
	
	
	Если Результат.КодСостояния >= 500 и Результат.КодСостояния < 600  Тогда
		Сообщить("Код статуса больше 5XX, ошибка сервера. Код статуса: " + Результат.КодСостояния);
	КонецЕсли;
	
	
	Если Результат.КодСостояния >= 300 и Результат.КодСостояния < 400  Тогда
		Сообщить("Код статуса больше 3XX, Перенаправление. Код статуса: " + Результат.КодСостояния);
		Если Результат.КодСостояния = 302 Тогда
			Сообщить("Код статуса 302, Постоянное перенаправление.");
			АдресРесурса = Результат.Заголовки.Получить("Location");
			Если АдресРесурса <> Неопределено Тогда
				Сообщить("Выполняю запрос по новому адресу " + АдресРесурса);
				ВыполнитьHTTPЗапрос(АдресРесурса);
			Иначе
				Сообщить("Сервер не сообщил адрес ресурса!");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Статусы 1XX и 2XX считаем хорошими
	Если Результат.КодСостояния < 300 Тогда 
		//		   Сообщить("Ок"); 
		//		   Сообщить("Код статуса: " + Результат.КодСостояния); 
	КонецЕсли; 
	возврат(Результат);
КонецФункции

&НаСервере
Функция СтруктураURI(Знач СтрокаURI) Экспорт
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = Найти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;
	
	// строка соединения и путь на сервере
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = Найти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
	
	// информация пользователя и имя сервера
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = Найти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = Найти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = Найти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(Порт <> "", Число(Порт), Неопределено));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции


&НаКлиенте
Процедура ЗаказыПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Отбор = Новый Структура;
	Отбор.Вставить("НомерЗаказа", Элемент.ТекущиеДанные.НомерЗаказа);
	Элементы.СоставЗаказа.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	ИтогиКоличество = 0;
	ИтогиВес = 0;	
	Для Каждого Строка Из Объект.СоставЗаказа Цикл
		Если Элементы.СоставЗаказа.ПроверитьСтроку(Строка.ПолучитьИдентификатор()) тогда
			
			ИтогиКоличество = ИтогиКоличество+Строка.Количество;
			ИтогиВес = ИтогиВес+Строка.Вес;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.СоставЗаказаКоличество.ТекстПодвала = Формат(ИтогиКоличество, "ЧЦ=10; ЧДЦ=0");
	Элементы.СоставЗаказаВес.ТекстПодвала = Формат(ИтогиВес, "ЧЦ=10; ЧДЦ=0");
КонецПроцедуры


